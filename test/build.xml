<!--

Ant build.xml for Zserio Java extension tests.

The following properties can be set:

zserio.release_dir         - Directory where to find Zserio release to test. Default is "../distr".
zserio_java_test.build_dir - Directory where to put generated files. Default is "../build/test/java".
zserio_java_test.filter    - Test filter (supports glob patterns). Default is "**".
findbugs.home_dir          - Location of the findbugs tool. If not set, findbugs is not run.
zserio_java_test.grpc      - Whether the GRPC tests are enabled (default is "no").

-->
<project name="zserio_java_test" basedir="." default="run" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <dirname property="zserio_java_test.base_dir" file="${ant.file.zserio_java_test}"/>

    <property name="zserio.root_dir" location="${zserio_java_test.base_dir}/.."/>
    <property name="zserio.release_dir" location="${zserio.root_dir}/distr"/>
    <property name="zserio.jar_dir" location="${zserio.release_dir}/zserio_libs"/>

    <property name="runtime.jar_dir" location="${zserio.release_dir}/runtime_libs/java"/>
    <property name="runtime.jar_file" location="${runtime.jar_dir}/zserio_runtime.jar"/>

    <property name="3rdparty.jar_dir" location="${zserio.root_dir}/3rdparty/java"/>
    <property name="3rdparty.junit.jar_file" location="${3rdparty.jar_dir}/junit-4.10.jar"/>
    <property name="3rdparty.sqlitejdbc.jar_file" location="${3rdparty.jar_dir}/sqlite-jdbc-3.23.1.jar"/>
    <property name="3rdparty.grpc.jar_dir" location="${3rdparty.jar_dir}/grpc"/>

    <property name="zserio_java_test.build_dir" location="${zserio.root_dir}/build/test/java"/>
    <property name="zserio_java_test.filter" value="**"/>
    <property name="zserio_java_test.grpc" value="no"/>

    <condition property="findbugs.classpath" value="${findbugs.home_dir}/lib/findbugs-ant.jar">
        <isset property="findbugs.home_dir"/>
    </condition>
    <condition property="findbugs.classname" value="edu.umd.cs.findbugs.anttask.FindBugsTask">
        <isset property="findbugs.home_dir"/>
    </condition>

    <!-- Test common utilities needed for some tests. -->
    <include file="${zserio_java_test.base_dir}/utils/java/build.xml"/>

    <!-- Zserio ant task -->
    <taskdef name="zserio" classpath="${zserio.release_dir}/ant_task/zserio_ant.jar"
        classname="zserio.ant.ZserioTask"/>

    <!-- targets commons -->
    <macrodef name="testProperties">
        <attribute name="testPath"/>
        <attribute name="testName"/>
        <sequential>
            <dirname property="@{testName}.base_dir" file="${ant.file.@{testName}}"/>

            <property name="@{testName}.build_dir" location="${zserio_java_test.build_dir}/@{testPath}"/>
            <property name="@{testName}.zs.in_dir" location="${@{testName}.base_dir}/zs"/>
            <property name="@{testName}.zs.out_dir" location="${@{testName}.build_dir}/gen"/>
            <property name="@{testName}.zs.log_file" location="${@{testName}.build_dir}/zserio_log.txt"/>
            <property name="@{testName}.run_dir" location="${@{testName}.build_dir}/run"/>
        </sequential>
    </macrodef>

    <macrodef name="testPrepare">
        <attribute name="testName"/>
        <sequential>
            <mkdir dir="${@{testName}.build_dir}/classes"/>
        </sequential>
    </macrodef>

    <macrodef name="testGenCheck">
        <attribute name="testName"/>
        <sequential>
            <dependset>
                <srcfileset dir="${@{testName}.zs.in_dir}">
                    <include name="**/*.zs"/>
                </srcfileset>
                <srcfileset dir="${zserio.jar_dir}">
                    <include name="*.jar"/>
                </srcfileset>
                <srcfileset dir="${runtime.jar_dir}">
                    <include name="*.jar"/>
                </srcfileset>
                <srcfileset file="${ant.file.@{testName}}"/>
                <targetfileset file="${@{testName}.zs.log_file}"/>
            </dependset>
            <available file="${@{testName}.zs.log_file}"
                property="@{testName}.zs.gen_is_uptodate"/>
        </sequential>
    </macrodef>

    <macrodef name="testGen">
        <attribute name="testName"/>
        <attribute name="zsFile"/>
        <attribute name="ignoreError" default="false"/>
        <attribute name="logLevel" default="warn"/>
        <element name="args" implicit="yes" optional="true"/>
        <sequential>
            <record name="${@{testName}.zs.log_file}" action="start" loglevel="@{logLevel}"/>

            <zserio srcPath="${@{testName}.zs.in_dir}" srcFile="@{zsFile}"
                java="${@{testName}.zs.out_dir}" ignoreError="@{ignoreError}">
                <dependencies unless:true="@{ignoreError}">
                    <fileset dir="${@{testName}.zs.in_dir}" includes="**/*.zs"/>
                    <fileset dir="${zserio.jar_dir}"/>
                    <fileset dir="${runtime.jar_dir}"/>
                    <fileset file="${ant.file.@{testName}}"/>
                </dependencies>
                <output>
                    <fileset dir="${@{testName}.zs.out_dir}" includes="**/*.java" erroronmissingdir="false"/>
                </output>
                <classpath>
                    <fileset dir="${zserio.jar_dir}">
                        <include name="*.jar"/>
                    </fileset>
                </classpath>
                <args/>
            </zserio>

            <record name="${@{testName}.zs.log_file}" action="stop"/>
        </sequential>
    </macrodef>

    <macrodef name="testCompile">
        <attribute name="testName"/>
        <attribute name="srcPath" default="${@{testName}.base_dir}/java:${@{testName}.zs.out_dir}"/>
        <attribute name="grpc" default="false"/>
        <sequential>
            <depend srcDir="@{srcPath}"
                destDir="${@{testName}.build_dir}/classes"
                cache="${@{testName}.build_dir}/depend-cache"/>
            <javac destdir="${@{testName}.build_dir}/classes" debug="on" encoding="utf8"
                includeAntRuntime="false">
                <compilerarg value="-Xlint:all"/>
                <compilerarg value="-Xlint:-cast"/>
                <compilerarg value="-Werror"/>
                <classpath>
                    <pathelement location="${runtime.jar_file}"/>
                    <pathelement location="${3rdparty.junit.jar_file}"/>
                    <pathelement location="${test_utils.jar_file}"/>
                    <fileset dir="${3rdparty.grpc.jar_dir}" if:true="@{grpc}">
                        <include name="*.jar"/>
                    </fileset>
                </classpath>
                <src path="@{srcPath}"/>
            </javac>
        </sequential>
    </macrodef>

    <macrodef name="testFindbugs">
        <attribute name="testName"/>
        <attribute name="srcPath" default="${@{testName}.base_dir}/java:${@{testName}.zs.out_dir}"/>
        <attribute name="grpc" default="false"/>
        <sequential>
            <taskdef name="findbugs" classpath="${findbugs.classpath}" classname="${findbugs.classname}"/>
            <findbugs home="${findbugs.home_dir}"
                output="html"
                outputFile="${@{testName}.build_dir}/findbugs.html"
                excludeFilter="${@{testName}.base_dir}/findbugs_filter.xml"
                reportLevel="low"
                errorProperty="@{testName}.is_failed"
                warningsProperty="@{testName}.is_failed">
                <sourcePath path="@{srcPath}"/>
                <fileset dir="${@{testName}.build_dir}/classes"/>
                <auxClasspath>
                    <pathelement location="${runtime.jar_file}"/>
                    <pathelement location="${3rdparty.junit.jar_file}"/>
                    <pathelement location="${test_utils.jar_file}"/>
                    <fileset dir="${3rdparty.grpc.jar_dir}" if:true="@{grpc}">
                        <include name="*.jar"/>
                    </fileset>
                </auxClasspath>
            </findbugs>
            <fail message="FindBugs found some issues!" if="@{testName}.is_failed"/>
        </sequential>
    </macrodef>

    <macrodef name="testRun">
        <attribute name="testName"/>
        <attribute name="grpc" default="false"/>
        <element name="resources" optional="true"/>
        <sequential>
            <delete dir="${@{testName}.run_dir}"/>
            <mkdir dir="${@{testName}.run_dir}"/>
            <copy file="${@{testName}.zs.log_file}" todir="${@{testName}.run_dir}"/>
            <resources/>
            <junit printsummary="no" fork="on" haltonfailure="on" dir="${@{testName}.run_dir}">
                <classpath>
                    <pathelement location="${@{testName}.build_dir}/classes"/>
                    <pathelement location="${runtime.jar_file}"/>
                    <pathelement location="${3rdparty.junit.jar_file}"/>
                    <pathelement location="${3rdparty.sqlitejdbc.jar_file}"/>
                    <pathelement location="${test_utils.jar_file}"/>
                    <fileset dir="${3rdparty.grpc.jar_dir}" if:true="@{grpc}">
                        <include name="*.jar"/>
                    </fileset>
                </classpath>
                <batchtest>
                    <fileset dir="${@{testName}.base_dir}/java" includes="**/*Test.java"/>
                    <formatter type="plain" usefile="false"/>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <macrodef name="testClean">
        <attribute name="testName"/>
        <sequential>
            <delete dir="${@{testName}.build_dir}"/>
        </sequential>
    </macrodef>

    <target name="clean" depends="test_utils.clean">
        <subant target="clean" inheritall="true">
            <fileset dir="." includes="${zserio_java_test.filter}/**/build.xml" excludes="build.xml,utils/**"/>
        </subant>
    </target>

    <target name="gen">
        <subant target="gen" inheritall="true">
            <fileset dir="." includes="${zserio_java_test.filter}/**/build.xml" excludes="build.xml,utils/**"/>
        </subant>
    </target>

    <target name="run" depends="test_utils.findbugs">
        <subant target="run" inheritall="true">
            <fileset dir="." includes="${zserio_java_test.filter}/**/build.xml" excludes="build.xml,utils/**"/>
        </subant>
    </target>
</project>
